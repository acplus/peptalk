// Include file for PDBAtom class



// Class declaration

class PDBAtom {
public:
  // Constructor
  PDBAtom(PDBMolecule *molecule, PDBChain *chain, PDBResidue *residue,
          int serial, const char *name, int altLoc, RNScalar x, RNScalar y, RNScalar z, 
          RNScalar occupancy, RNScalar tempFactor);

  // Properties
  int ID(void) const;
  int Serial(void) const;
  const char *Name(void) const;
  const R3Point& Position(void) const;
  RNScalar Occupancy(void) const;
  RNScalar TempFactor(void) const;
  int AlternateLocation(void) const;
  RNScalar Radius(void) const;
  RNRgb Color(void) const;
  R3Box BBox(void) const;

  // PDB access functions
  PDBElement *Element(void) const;
  PDBResidue *Residue(void) const;
  PDBAminoAcid *AminoAcid(void) const;
  PDBChain *Chain(void) const;
  PDBMolecule *Molecule(void) const;

public:
  // Straight from PDB file
  int serial;
  char name[8];
  int altLoc;
  int iCode;
  R3Point position;
  RNScalar occupancy;
  RNScalar tempFactor;

public:
  // Other stuff
  int id;
  PDBResidue *residue;
  PDBElement *element;
};



// Inline functions


inline int PDBAtom::
ID(void) const
{
  // Return id
  return id;
}



inline int PDBAtom::
Serial(void) const
{
  // Return serial number
  return serial;
}



inline const char *PDBAtom::
Name(void) const
{
  // Return name
  return name;
}



inline const R3Point& PDBAtom::
Position(void) const
{
  // Return position
  return position;
}



inline RNScalar PDBAtom::
Occupancy(void) const
{
  // Return occupancy
  return occupancy;
}



inline RNScalar PDBAtom::
TempFactor(void) const
{
  // Return temperature factor
  return tempFactor;
}



inline int PDBAtom::
AlternateLocation(void) const
{
  // Return altLoc code
  return altLoc;
}



inline RNLength PDBAtom::
Radius(void) const
{
  // Return bounding box (include radius)
  return (element) ? element->Radius() : 1.8;
}



inline RNRgb PDBAtom::
Color(void) const
{
  // Return bounding box (include radius)
  return (element) ? element->Color() : RNRgb(0.7, 0.7, 0.7);
}



inline R3Box PDBAtom::
BBox(void) const
{
  // Return bounding box (include radius)
  return R3Box(Position() - Radius() * R3ones_vector, Position() + Radius() * R3ones_vector);
}



inline PDBElement *PDBAtom::
Element(void) const
{
  // Return element
  return element;
}



inline PDBResidue *PDBAtom::
Residue(void) const
{
  // Return residue
  return residue;
}



