#!/usr/bin/perl
# author: dattias
# Analysis

$dbDir = "/vol/ek/londonir/CleanPeptiDB/db/";
$ftMapDataDir = "/vol/ek/londonir/CleanPeptiDB/analysis/soaking/bound/";

$numMatches_geometricalFit = 3;
$rms_geometricalFit = 0.7;
$numMatches_approxFit = 4;
$rms_approxFit = 2.0;

# Classification
$MULTIPLE_EXACT_FRAGMENTS = 1;
$SINGLE_EXACT_FRAGMENT_PLUS_APPROX = 2;
$SINGLE_EXACT_FRAGMENT = 3;
$MULTIPLE_APPROX_FRAGMENTS = 4;
$SINGLE_APPROX_FRAGMENT = 5;
$NO_FRAGMENTS = 6;
$NO_CLASS = 0;

%ClassStr = (
	$MULTIPLE_EXACT_FRAGMENTS => "MULTIPLE_EXACT_FRAGMENTS",
	$SINGLE_EXACT_FRAGMENT_PLUS_APPROX => "SINGLE_EXACT_FRAGMENT_PLUS_APPROX",
	$SINGLE_EXACT_FRAGMENT => "SINGLE_EXACT_FRAGMENT",
	$MULTIPLE_APPROX_FRAGMENTS => "MULTIPLE_APPROX_FRAGMENTS",
	$SINGLE_APPROX_FRAGMENT => "SINGLE_APPROX_FRAGMENT",
	$NO_FRAGMENTS => "NO_FRAGMENTS",
	$NO_CLASS => "NO_CLASS",
);

# create ras scripts
$exactFragmentsRasScript = "findExactFragments.rasscript";
$approxFragmentsRasScript = "findApproxFragments.rasscript";
$exactFragmentsResults = "exactFragments.out";
$approxFragmentsResults = "approxFragments.out";

$classificationFile = "classificationResults.txt";
$classificationSummary = "classificationSummary.txt";

# findExactFragments: geometricalFit
open(EXACT, ">$exactFragmentsRasScript") or die $!;
print EXACT "select within (".sprintf("%.2f", $rms_geometricalFit).",(*:B)) and not (*:B or *:A)\n";
print EXACT "show selected\n";
print EXACT "quit\n";
close EXACT;
# findApproxFragments: approxFit
open(APPROX, ">$approxFragmentsRasScript") or die $!;
print APPROX "select within (".sprintf("%.2f", $rms_approxFit).",(*:B)) and not (*:B or *:A)\n";
print APPROX "show selected\n";
print APPROX "quit\n";
close APPROX;

opendir(DIR, $dbDir) or die $!;
open(OUT, ">$classificationFile") or die $!;
$rasmolPdbName = "forRasmol.pdb";
while (my $file = readdir(DIR)) {

    next if (!($file =~ m/^(....)\.pdb/));
	$pdb = $1;
	print "$pdb\n";
	
	if(-e "$ftMapDataDir/$pdb.map.pdb"){
		`cat $ftMapDataDir/$pdb.map.pdb $dbDir/$pdb.pdb > $rasmolPdbName`;
		`rasmol $rasmolPdbName -script $exactFragmentsRasScript -nodisplay > $exactFragmentsResults`;
		`rasmol $rasmolPdbName -script $approxFragmentsRasScript -nodisplay > $approxFragmentsResults`;

		$class = findClass();
		print OUT $pdb.": ".$ClassStr{$class}." ($class)\n";
		`rm -f $exactFragmentsResults $approxFragmentsResults`;
		#`mv $exactFragmentsResults $exactFragmentsResults.$pdb`;
		#`mv $approxFragmentsResults $approxFragmentsResults.$pdb`;
		`rm -f $rasmolPdbName`;
	}

}

closedir(DIR);
close(OUT);

open(OUT, ">$classificationSummary") or die $!;
	print OUT printClass($MULTIPLE_EXACT_FRAGMENTS);
	print OUT printClass($SINGLE_EXACT_FRAGMENT_PLUS_APPROX);
	print OUT printClass($SINGLE_EXACT_FRAGMENT);
	print OUT printClass($MULTIPLE_APPROX_FRAGMENTS);
	print OUT printClass($SINGLE_APPROX_FRAGMENT);
	print OUT printClass($NO_FRAGMENTS);
close(OUT);

#############################################################

sub printClass{
	my ($class) = @_;
	chomp($c = `cat $classificationFile | cut -d" " -f2,3 | sort | grep -c "($class)"`);
	$str = $ClassStr{$class}." ($class) - $c\n";
	return $str;
}

sub findClass{
	$class = $NO_CLASS;
	
	#print "Exact:\n";
	$exactFragments = findNumFragments($exactFragmentsResults, $numMatches_geometricalFit);
	#print "Approx:\n";
	$approxFragments = findNumFragments($approxFragmentsResults, $numMatches_approxFit);

	#print "exact $exactFragments, approx $approxFragments\n";

	if($exactFragments > 0){
		if($exactFragments > 1){
			$class = $MULTIPLE_EXACT_FRAGMENTS;
		}
		else{
			if($approxFragments > 1){
				$class = $SINGLE_EXACT_FRAGMENT_PLUS_APPROX;
			}
			else{
				$class = $SINGLE_EXACT_FRAGMENT;
			}
		}
	}
	elsif($approxFragments > 0){
		if($approxFragments > 1){
			$class = $MULTIPLE_APPROX_FRAGMENTS;
		}
		else{
			$class = $SINGLE_APPROX_FRAGMENT;
		}
	}
	else{
		$class = $NO_FRAGMENTS;
	}
	return $class;
}

sub findNumFragments{
	my ($filename, $numMatches) = @_;
	$numMatchedChains = 0;
	$numMatchedUnits = 0;
	$inChain = 0;
	$currChain = "";

	open(RESULTS, "<$filename") or die $!;
	chomp(@rasout = <RESULTS>);
	@results = grep(/Chain: .* Group: .*/, @rasout);
	foreach $res(@results){
		if($res =~ m/.*Chain: (.)  Group:.*\((.*)\/.*/){
			$chain = $1;
			$hits = $2;
			#print "\tchain $chain, hits $hits\n";
			if($inChain == 1 && $chain ne $currChain){
				$inChain = 0;
			}
			if($inChain == 0){
				#print "numMatchedUnits(switch) $numMatchedUnits\n";
				if($numMatchedUnits > 0){
					$numMatchedChains = $numMatchedChains+1;
				}

				$numMatchedUnits = 0;
				$inChain = 1;
				$currChain = $chain;
			}
			if($hits >= $numMatches){
				#print "numMatchedUnits(in) $numMatchedUnits\n";
				$numMatchedUnits = $numMatchedUnits+1;
			}
		}
	}
	# Check last chain
	if($numMatchedUnits > 0){
		#print "numMatchedUnits(switch) $numMatchedUnits\n";
		$numMatchedChains = $numMatchedChains+1;
	}

	return $numMatchedChains;
}

